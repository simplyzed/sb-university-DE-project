#import os
from pathlib import Path
from psycopg2.extras import execute_batch
from .config import Config
import time
from datetime import datetime
import pandas as pd


def gen_save_sql( config: Config, description: str, suffix: str, save_txt):
    if suffix != '':
        fname = description + "__" + suffix 
    else:
        fname = description

    fname = config.gen_dir + '/' + fname + '.sql'

    with open( fname, 'rw' ) as f:
        f.write(save_txt)


def gen_rewrite_py( config: Config, description: str, save_txt):
    '''comments line with description (should be func call) 
    and adds save_txt after it'''

    with open( config.gen_main, 'rw' ) as f:
        txt_in = f.read()
        
        idx = txt_in.find(description)
        if idx==-1:
            txt_in = (f"GEN ERROR: line with '{description}' not found in code") + txt_in
            return txt_in
        
        begin = txt_in.rfind('\n',0,idx) 
        #assume no additional parenthesis 
        end = txt_in.find(')', idx)
        end = txt_in.find('\n', end)
        inner = txt_in[begin:end].replace("\n","\n#") + '\n' + save_txt
        new_txt = txt_in[0:begin] + inner + txt_in[end:]

        f.write(new_txt)


def sql_file( config: Config, description: str, read_only_suffix = '') -> dict:
    if read_only_suffix != '':
        search_for = description + "__" + read_only_suffix 
    else:
        search_for = description
    filenames = config.get_sql_files(search_for)
    sql_text_dict = {}
    for f in filenames:
        f =''
        if '__' in f:
            suff = f.split('__')[-1]
            suff = suff.split('.')[0]
        else:
            suff = 'SQL'

        with open( f ) as ff:
            sql_text = ff.read()
            sql_text_dict[suff] = sql_text
    return sql_text_dict


def sql_file_exec( config: Config, description: str, cursor_alias: str, exec_only_suffix = ''):

    cursor = config.get_cursor(cursor_alias)
    print(description, datetime.now().isoformat(sep=' ', timespec='seconds'))
    queries_dict = sql_file(config, description, exec_only_suffix)
    for key,value in queries_dict:
        #start_time = time.time()
        print(f"--- Exec {key}")
        cursor.execute(value)
        #print(f"--->  {key} + fetch time: ", (time.time() - start_time ) )           


def get_table_columns( cursor, table_name: str) -> list:
    l = table_name.split(".")
    if len(l)!=2 :
        raise Exception("dwh table name must contain schema name")
    sql_col = (
        f" SELECT column_name FROM information_schema.columns"
        f" WHERE table_schema = '{l[0]}' and table_name = '{l[1]}'"
    )
    cursor.execute(sql_col)
    tuple_list = cursor.fetchall()
    return [item[0] for item in tuple_list]


def simple_src_to_dwh (config : Config,
                       description: str, 
                       src_table_name: str, 
                       dwh_table_name: str, 
                       cursor_src_alias = 'src', 
                       cursor_dwh_alias = 'dwh'):

    cursor_src = config.get_cursor(cursor_src_alias)
    cursor_dwh = config.get_cursor(cursor_dwh_alias)

    start_time = time.time()
    print(description, datetime.now().isoformat(sep=' ', timespec='seconds'))
    
    if config.debug :
        print("--- get columns")   
    columns = get_table_columns(cursor_dwh, dwh_table_name)
    #columns.remove("update_dt")
    columns_dwh = ",".join( columns )
    insert_tmpl = ",".join([" %s"] * len(columns)) # join %s * n of columns
    #columns [ columns.index("update_dt") ] = "null" # update
    columns_src = ",".join( columns )

    src_select = f"SELECT {columns_src} FROM {src_table_name}"
    dwh_insert = f"INSERT INTO {dwh_table_name} ({columns_dwh}) VALUES ({insert_tmpl})"

    if config.show_sql_and_exit :
        print(src_select)
        print(dwh_insert)
        return

    print("--- SELECT from source:", src_table_name)   
    if config.debug :
        print("---: ", src_select)           
    cursor_src.execute(src_select) 
    if config.debug :
        print("--->  SELECT + fetch time: ", (time.time() - start_time ) )   
    
    start_time = time.time()
    print("--- INSERT into:", dwh_table_name)   
    if config.debug :
        print("---: ", dwh_insert)           
    for row in cursor_src.fetchall():
        cursor_dwh.execute(dwh_insert, row)
    if config.debug :
        print("--->  INSERT time: ", (time.time() - start_time) )   
    if config.show_stg_insert_count :
        chk_count = f'SELECT count(*) from {dwh_table_name}'
        cursor_dwh.execute( chk_count )
        tuple_list = cursor_dwh.fetchall()
        print("--->  Count(*):", tuple_list[0][0])
        

def file_to_dwh (config : Config,
                description: str, 
                src_file_name: str, 
                src_file_type: str,
                dwh_src_links: dict,
                dwh_table_name: str,
                read_file_params = {},
                add_col = '',
                add_col_value = '', 
                cursor_dwh_alias = 'dwh'):
    
    cursor_dwh = config.get_cursor(cursor_dwh_alias)
    start_time = time.time()
    print(description, datetime.now().isoformat(sep=' ', timespec='seconds'))

    if not (src_file_type == 'excel' or src_file_type == 'csv'):
        raise Exception("src_file_type must be 'excel' or 'csv'")

    dwh_table_col_list = [key for key,value  in dwh_src_links.items()]
    dwh_table_cols = ','.join ( dwh_table_col_list )
    insert_tmpl = ",".join([" %s"] * len(dwh_table_col_list)) # join %s * n of columns
    dwh_insert = f"INSERT INTO {dwh_table_name} ({dwh_table_cols}) VALUES ({insert_tmpl})"
    if config.show_sql_and_exit :
        print(dwh_insert)
        return
    
    print(f"--- Read {src_file_type}: {src_file_name}")
    if src_file_type == 'csv':
        df = pd.read_csv( src_file_name, sep=';',**read_file_params )
    elif src_file_type == 'excel':
        df = pd.read_excel ( src_file_name, **read_file_params )
    
    if add_col != '':
        df[add_col] = add_col_value

    file_col_list = [value for key,value  in dwh_src_links.items()]
    df = df[file_col_list]
    if config.debug :
        print("--->  read time: ", (time.time() - start_time ) )   

    start_time = time.time()
    print("--- INSERT into:", dwh_table_name)   
    if config.debug :
        print("---: ", dwh_insert)
    execute_batch(cursor_dwh, dwh_insert, df.values.tolist(),page_size=1000)
    #cursor_dwh.executemany( dwh_insert, df.values.tolist() )
    if config.debug :
        print("--->  INSERT time: ", (time.time() - start_time) )   
    if config.show_stg_insert_count :
        chk_count = f'SELECT count(*) from {dwh_table_name}'
        cursor_dwh.execute( chk_count )
        tuple_list = cursor_dwh.fetchall()
        print("--->  Count(*):", tuple_list[0][0])

def dds_load(config : Config,
                description: str, 
                fact_or_dim: str, 
                stg_table: str,
                dds_table: str,
                id_column: str,
                compare_by_columns: list,
                insert_columns_dds_add = 'create_dt',
                insert_columns_stg_add = 'stg.create_dt',
                update_dds_set_add = 'update_dt = tmp.update_dt',
                update_stg_select_add = 'stg.update_dt',
                use_static_scripts = False,
                cursor_dwh_alias = 'dwh'):
    
    cursor_dwh = config.get_cursor(cursor_dwh_alias)
    start_time = time.time()
    print(description, datetime.now().isoformat(sep=' ', timespec='seconds'))

    if not (fact_or_dim == 'fact' or fact_or_dim=='dim'):
        raise Exception("fact_or_dim must be 'fact' or 'dim'")
    if (insert_columns_dds_add == '' and insert_columns_stg_add !='') or \
       (insert_columns_dds_add != '' and insert_columns_stg_add =='' ):
        raise Exception("insert_columns_* arguments must be empty or filled")
    if (update_dds_set_add == '' and update_stg_select_add !='') or \
       (update_dds_set_add != '' and update_stg_select_add =='' ):
        raise Exception("update_dds update_stg arguments must be empty or filled")

    ####################### GENERATE SQL
    if config.debug :
        print("--- get columns")   
    columns = get_table_columns(cursor_dwh, dds_table)
    if 'update_dt' in columns:
        columns.remove('update_dt')
    if 'create_dt' in columns:
        columns.remove('create_dt')
    columns_noid = columns.copy()
    
    #INSERT new
    columns_dds = ",\n\t".join( columns )
    columns_stg = ",\n\t".join( ["stg."+s for s in columns] )
    on_clause_cols = [f"stg.{col} = tgt.{col}" for col in compare_by_columns ]
    on_clause = "\n\tand ".join( on_clause_cols )
    if insert_columns_dds_add != '':
        columns_dds += f",\n\t{insert_columns_dds_add.lstrip(',')}"
        columns_stg += f",\n\t{insert_columns_stg_add.lstrip(',')}"

    insert_sql = (
        f"INSERT INTO {dds_table} ({columns_dds})\n"
        f"  SELECT {columns_stg} FROM {stg_table} stg\n"
        f"      LEFT JOIN {dds_table} tgt\n"
        f"          on 1 = 1\n"
        f"          and {on_clause}\n"
        f"  WHERE tgt.{id_column} is null"
    )
    

    #UPDATE
    columns_noid.remove(id_column)
    tmpl = "stg.{col} <> tgt.{col} or (stg.{col} is null and tgt.{col} is not null) or (stg.{col} is not null and tgt.{col} is null)"
    inner_where_clause = "\n\tor ".join( [tmpl.format(col=col) for col in columns_noid] )
    dds_set = ",\n\t".join( [f"{col} = tmp.{col}" for col in columns_noid] )
    #on_clause is the same
    stg_select = ",".join( [f"stg.{col}" for col in columns] )
    if update_dds_set_add != '':
        dds_set += f",\n\t{update_dds_set_add.lstrip(',')}"
        stg_select += f",\n\t{update_stg_select_add.lstrip(',')}"

    update_sql = (
        f"UPDATE {dds_table} tgt\n"
        f"SET {dds_set}\n"
        f"FROM (\n"
        f"  SELECT {stg_select} FROM {stg_table} stg\n"
        f"    INNER JOIN {dds_table} tgt\n"
        f"          on 1=1\n"
        f"          and {on_clause}\n"
        f"  WHERE (1=0\n"
        f"         or {inner_where_clause}\n"
        f"        )\n"
        f") tmp\n"
        f"WHERE tgt.{id_column} = tmp.{id_column}"
    )
    
    #DELETE
    delete_sql = (
        f"DELETE from {dds_table} tgt\n"
        f"WHERE {id_column} in (\n"
        f"  SELECT stg.{id_column} FROM {dds_table} tgt\n"
        f"      LEFT JOIN {stg_table} stg\n"
        f"          on 1 = 1\n"
        f"          and {on_clause}\n"
        f"  WHERE stg.{id_column} is null\n"
        f")"
    )


    if config.show_sql_and_exit :
        print(insert_sql)
        print()
        print(update_sql)
        print()
        print(delete_sql)
        print()
        return
    
    ####################### EXECUTE SQL
    # INSERT EXECUTION
    print("--- INSERT new into:", dds_table)   
    if config.show_stg_insert_count :
        chk_count = f'SELECT count(*) from {dds_table}'
        cursor_dwh.execute( chk_count )
        tuple_list = cursor_dwh.fetchall()
        print("--->  Count(*):", tuple_list[0][0])
        c1 = tuple_list[0][0]
    if config.debug :
        print("---: ", insert_sql)
    cursor_dwh.execute(insert_sql)

    if config.debug :
        print("--->  INSERT time: ", (time.time() - start_time) )   

    if config.show_stg_insert_count :
        chk_count = f'SELECT count(*) from {dds_table}'
        cursor_dwh.execute( chk_count )
        tuple_list = cursor_dwh.fetchall()
        print("--->  Count(*):", tuple_list[0][0])
        c2 = tuple_list[0][0]
        print("--->  inserted:", {c2-c1})

    if fact_or_dim == 'fact':
        return

    # UPDATE EXECUTION
    print("--- UPDATE :", dds_table)   
    start_time = time.time()
    
    if config.debug :
        print("---: ", update_sql)
    cursor_dwh.execute(update_sql)
    
    if config.debug :
        print("--->  UPDATE time: ", (time.time() - start_time) )   

    # DELETE EXECUTION
    print("--- DELETE :", dds_table)   
    start_time = time.time()
    
    if config.debug :
        print("---: ", delete_sql)
    cursor_dwh.execute(delete_sql)
    
    if config.debug :
        print("--->  DELETE time: ", (time.time() - start_time) )   


